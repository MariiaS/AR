# -*- coding: utf-8 -*-
"""robotarm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16EvnkjxZiHVujObiZdDX0nnwcHpXmCnJ
"""

import sys

from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *

# Some api in the chain is translating the keystrokes to this binary string
# so instead of saying: ESCAPE = 27, we use the following.
ESCAPE = b'\x1b'

# Number of the glut window.
window = 0

# Rotations of arm parts and part_6 opening
part_2 = 90.0
part_3 = 0.0
part_4 = 0.0
part_5 = 0.0
part_6 = 0.3


# Main function
def main():
    global window

    # GLUT initialization
    glutInit(())

    # GLUT display mode
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB)

    # Initial window size
    glutInitWindowSize(500, 500)

    # Initial window position
    glutInitWindowPosition(100, 100)

    # Window creation
    glutCreateWindow(b"Robot arm")

    # Initial colour and shading model
    glClearColor(0.0, 0.0, 0.0, 0.0)
    glClearDepth(1.0)  # Enables Clearing Of The Depth Buffer
    glDepthFunc(GL_LESS)  # The Type Of Depth Test To Do
    glEnable(GL_DEPTH_TEST)  # Enables Depth Testing
    glShadeModel(GL_FLAT)  # Flat shading model

    # Pass drawing function to glut
    glutDisplayFunc(draw)

    # When we are doing nothing, redraw the scene.
    glutIdleFunc(draw)

    # Register the function called when our window is resized.
    glutReshapeFunc(reshape)

    # Register the function called when the keyboard is pressed.
    glutKeyboardFunc(keys)

    # Start Event Processing Engine
    glutMainLoop()


# Draw robot arm parts
def draw():
    global part_2, part_3, part_4, part_5, part_6

    # Initial position
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glPushMatrix()
    glTranslatef(0.0, -3.0, -7.0)

    # Part 1
    glColor3f(0.5, 0.5, 0.8)
    glPushMatrix()
    glScalef(4.0, 0.2, 4)
    glutWireCube(1.0)
    glPopMatrix()

    # Part 2
    glColor3f(0.5, 0.8, 0.5)
    glRotatef(part_2, 0.0, 0.0, 1.0)
    glTranslatef(1.0, 0.0, 0.0)
    glPushMatrix()
    glScalef(2.0, 0.2, 0.5)
    glutWireCube(1.0)
    glPopMatrix()

    # Part # 3
    glColor3f(0.5, 0.8, 0.8)
    glTranslatef(1.0, 0.0, 0.0)
    glRotatef(part_3, 0.0, 0.0, 0.8)
    glTranslatef(1.0, 0.0, 0.0)
    glPushMatrix()
    glScalef(2.0, 0.2, 0.5)
    glutWireCube(1.0)
    glPopMatrix()

    # Part # 4
    glColor3f(0.8, 0.8, 0.5)
    glTranslatef(1.0, 0.0, 0.0);
    glRotatef(part_4, 0.0, 1.0, 1.0);
    glTranslatef(1.0, 0.0, 0.0);
    glPushMatrix();
    glScalef(2.0, 0.2, 0.5)
    glutWireCube(1.0)
    glPopMatrix()

    # Part # 5
    glColor3f(0.5, 0.5, 0.8)
    glTranslatef(1.0, 0.0, 0.0)
    glRotatef(part_5, 0.0, 0.0, 0.0)
    glTranslatef(0.3, 0.0, 0.0)
    glPushMatrix()
    glScalef(0.6, 1.5, 0.8)
    glutWireCube(1.0)
    glPopMatrix()

    # Part 6
    glColor3f(0.8, 0.5, 0.5)

    glTranslatef(0.0, 0.0, 0.0)

    glTranslatef(0.0, part_6, 0.0)
    glTranslatef(1.0, 0.0, 0.0)
    glPushMatrix()
    glScalef(1.5, 0.1, 0.1)
    glutWireCube(1.0)
    glPopMatrix()

    glTranslatef(0.0, -2 * part_6, 0.0)
    glTranslatef(0.0, 0.0, 0.0)
    glPushMatrix()
    glScalef(1.5, 0.1, 0.1)
    glutWireCube(1.0)
    glPopMatrix()

    glPopMatrix()
    glutSwapBuffers()


# Recalculate projection matrix if window size is modified
def reshape(w, h):
    glViewport(0, 0, w, h)  # Reset The Current Viewport And Perspective Transformation
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    gluPerspective(65.0, float(w) / float(h), 1.0, 20.0)
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()
    glTranslatef(0.0, 0.0, -6.0)


# This function reads the keyboard to move the part_4 accordingly
def keys(*args):
    global part_2, part_3, part_4, part_5, part_6
    key = args[0]
    if (key == b's'):
        if part_2 < 180.0:
            part_2 = (part_2 + 5.0) % 360.0
    elif (key == b'S'):
        if part_2 > 0.0:
            part_2 = (part_2 - 5.0) % 360.0
    elif (key == b'e'):
        part_3 = (part_3 + 5.0) % 360.0
    elif (key == b'E'):
        part_3 = (part_3 - 5.0) % 360.0
    elif (key == b'w'):
        part_4 = (part_4 + 5.0) % 360.0
    elif (key == b'W'):
        part_4 = (part_4 - 5.0) % 360.0
    elif (key == b'f'):
        if part_6 > 0.1:
            part_6 = (part_6 - 0.05)
    elif (key == b'F'):
        if part_6 < 0.7:
            part_6 = (part_6 + 0.05)
    elif (key == ESCAPE):
        glutDestroyWindow(window)
        sys.exit(0)

    # Print message to console, and kick off the main to get it rolling.


if __name__ == '__main__':
    print("Hit ESC key to quit.")
    main()
